type Query {
  allClients: [Client]!
  allTimeLogs: [TimeLog]!
}

type Mutation {
  createClient(input: CreateClientInput): CreateClientPayload
  updateClient(input: UpdateClientInput): UpdateClientPayload
  destroyClient(input: DestroyClientInput): DestroyClientPayload
  createTimeLog(input: CreateTimeLogInput): CreateTimeLogPayload
  updateTimeLog(input: UpdateTimeLogInput): UpdateTimeLogPayload
  destroyTimeLog(input: DestroyTimeLogInput): DestroyTimeLogPayload
}

input CreateClientInput {
  name: String!
}

type CreateClientPayload {
  node: Client
  errors: [Error]!
}

input UpdateClientInput {
  id: ID!
  name: String!
}

type UpdateClientPayload {
  node: Client
  errors: [Error]!
}

input DestroyClientInput {
  id: ID!
}

type DestroyClientPayload {
  node: Client
  errors: [Error]!
}

input CreateTimeLogInput {
  clientId: ID!
  description: String!
}

type CreateTimeLogPayload {
  node: TimeLog
  errors: [Error]!
}

input UpdateTimeLogInput {
  id: ID!
  description: String!
}

type UpdateTimeLogPayload {
  node: TimeLog
  errors: [Error]!
}

input DestroyTimeLogInput {
  id: ID!
}

type DestroyTimeLogPayload {
  node: TimeLog
  errors: [Error]!
}

type Error {
  field: String!
  messages: [String]!
}

type Client {
  id: ID!
  name: String!
  timeLogs: [TimeLog]!
}

type TimeLog {
  id: ID!
  description: String!
  clientId: ID!
  client: Client!
}
